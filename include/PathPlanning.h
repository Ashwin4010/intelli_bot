/**
 * MIT License
 *
 * Copyright (c) 2018 Venkatraman Narayanan, Amrish Baskaran
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 *
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *
 *  @file    PathPlanning.h
 *  @Author  Venkatraman Narayanan (vijay4313)
 *  @Author Amrish Baskaran (amrish1222)
 *  @copyright  MIT
 *  @brief  PathPlanning header file
 */

#ifndef INTELLI_BOT_INCLUDE_PATHPLANNING_H_
#define INTELLI_BOT_INCLUDE_PATHPLANNING_H_

#include <vector>
#include <tf2/LinearMath/Quaternion.h>
#include <geometry_msgs/Pose.h>

class PathPlanning {
 public:

  /**
   * @brief Constructor
   * @param none
   * @return none
   */
  PathPlanning();

  /**
   * @brief Destructor
   * @param none
   * @return none
   */
  virtual ~PathPlanning();

  /**
   * @brief Generates the vertices of
   *        rectangular area to be covered
   * @param none
   * @return none
   */
  void generatePath();

  /**
   * @brief routine to set the desired
   *        rectangular coverage area of the drone
   * @param length - length of rectangular coverage area
   *        breadth - breadth of rectangular coverage area
   * @return none
   */
  void setCovArea(double &length, double &breadth);

  /**
   * @brief retrieves the vector of path
   *         generated by the algorithm
   * @param none
   * @return generatedPath - path vector generated
   *         by the algorithm
   */
  std::vector<geometry_msgs::Pose> getPath();

  /**
   * @brief point3d structure used to define
   *        x,y,z position.
   */
  struct point3d {
    double x;
    double y;
    double z;
  };

 private:

  /**
   * @brief Stores the height of travel
   */
  double _height;

  /**
   * @brief Stores width of the rectangular area
   */
  double _length;

  /**
   * @brief Stores breadth of the rectangular area
   */
  double _breadth;

  /**
   * @brief Stores the generated path
   */
  std::vector<geometry_msgs::Pose> generatedPath;
};

#endif /* INTELLI_BOT_INCLUDE_PATHPLANNING_H_ */

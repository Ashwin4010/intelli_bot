/**
 * MIT License
 *
 * Copyright (c) 2018 Venkatraman Narayanan, Amrish Baskaran
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 *
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 *
 *  @file    Control.h
 *  @Author  Venkatraman Narayanan (vijay4313)
 *  @Author  Amrish Baskaran (amrish1222)
 *  @copyright  MIT
 *  @brief  Control header file
 */

#ifndef INTELLI_BOT_INCLUDE_CONTROL_H_
#define INTELLI_BOT_INCLUDE_CONTROL_H_

#include <ros/ros.h>
#include "../include/PathPlanning.h"
#include "geometry_msgs/Twist.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Pose.h"
#include <tf/tf.h>
#include "nav_msgs/Odometry.h"
#include "std_msgs/Empty.h"
#include "../include/PID.h"
#include <cmath>
#include <math.h>

class Control {
 private:
  /**
   * @brief NodeHandle
   */
  ros::NodeHandle nh;

  /**
   * @brief Holds path generated by PathPlanning
   */
  std::vector<geometry_msgs::Pose> travPath;

  /**
   * @brief Current pose data
   */
  geometry_msgs::Pose currPose;

  /**
   * @brief holds velocity twist message to be
   * published
   */
  geometry_msgs::Twist cmdVel;

  /**
   * @brief Publisher for command velocity
   */
  ros::Publisher conVel;

  /**
   * @brief Publisher for takeOff
   */
  ros::Publisher takeOffPub;

  /**
   * @brief Publisher for landing
   */
  ros::Publisher landPub;

  /**
   * @brief Subscriber for current pose
   */
  ros::Subscriber currPoseSub;

  /**
   * @brief Empty message variable for
   * sending Takeoff and landing
   */
  std_msgs::Empty emptyMsg;

  /**
   * @brief landing flag
   */
  bool landFlag;

  /**
   * @brief PID time difference
   */
  double dt;

  /**
   * @brief Holds previous iteration time
   */
  double seconds_prev;

  /**
   * @brief PID object for X velocity
   */
  PID pidX;

  /**
   * @brief PID object for Z velocity
   */
  PID pidZ;

  /**
   * @brief PID object for Yaw angular
   * velocity
   */
  PID pidYaw;
 public:

  /**
   * @brief Constructor
   * @param none
   * @return none
   */
  Control();

  /**
   * @brief Destructor
   * @param none
   * @return none
   */
  virtual ~Control();

  /**
   * @brief Gets the index of the target point
   * @param none
   * @return index of required target point in path
   */
  int getTargetPos();

  /**
   * @brief Computing the required PID for X,Z and Yaw
   * and publishing
   * @param none
   * @return none
   */
  void computeStep();

  /**
   * @brief Callback function for Odometry subscription
   * @param Message in odometry topic
   * @return none
   */
  void currPoseCallback(const nav_msgs::Odometry::ConstPtr &msg);

  /**
   * @brief Get RPY from quaternion
   * @param Quaternion pose data
   * @return RPY pose data
   */
  geometry_msgs::Point quat2RPY(geometry_msgs::Pose &quat);
};

#endif /* INTELLI_BOT_INCLUDE_CONTROL_H_ */

/**
 * MIT License
 *
 * Copyright (c) 2018 Venkatraman Narayanan, Amrish Baskaran
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 *
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *
 *  @file    PathPlanning.cpp
 *  @Author  Venkatraman Narayanan (vijay4313)
 *  @Author  Amrish Baskaran (amrish1222)
 *  @copyright  MIT
 *  @brief  PathPlanning source file
 */

#include "../include/PathPlanning.h"
#include <tf2/LinearMath/Quaternion.h>
#include <vector>
#include <geometry_msgs/Pose.h>

/**
 * @brief Constructor
 * @param none
 * @return none
 */
PathPlanning::PathPlanning() {
  _height = 2.5;  // Stores the height of travel
  _length = 16.0;  // Stores width of the rectangular area
  _breadth = 18.0;  // Stores breadth of the rectangular area
}

/**
 * @brief Destructor
 * @param none
 * @return none
 */
PathPlanning::~PathPlanning() {
}

/**
 * @brief Generates the vertices of
 *        rectangular area to be covered
 * @param none
 * @return none
 */
void PathPlanning::generatePath() {
  const double PI = std::atan(1.0) * 4;
  geometry_msgs::Pose p0, p1, p2, p3, p4;
  tf2::Quaternion getQuat;

  // Initial Point
  p0.position.x = 0.0;
  p0.position.y = 0.0;
  p0.position.z = _height;
  getQuat.setRPY(0.0, 0.0, -PI);
  //Normalizing the quaternion
  getQuat.normalize();
  p0.orientation.x = getQuat[0];
  p0.orientation.y = getQuat[1];
  p0.orientation.z = getQuat[2];
  p0.orientation.w = getQuat[3];
  // Adding to the vector of pose
  generatedPath.push_back(p0);

  // Next point
  p1.position.x = -_length;
  p1.position.y = 0.0;
  p1.position.z = _height;
  getQuat.setRPY(0.0, 0.0, -PI);
  getQuat.normalize();
  p1.orientation.x = getQuat[0];
  p1.orientation.y = getQuat[1];
  p1.orientation.z = getQuat[2];
  p1.orientation.w = getQuat[3];
  // Adding to the vector of pose
  generatedPath.push_back(p1);

  // Next point
  p2.position.x = -_length;
  p2.position.y = _breadth;
  p2.position.z = _height;
  getQuat.setRPY(0.0, 0.0, PI / 2.0);
  getQuat.normalize();
  p2.orientation.x = getQuat[0];
  p2.orientation.y = getQuat[1];
  p2.orientation.z = getQuat[2];
  p2.orientation.w = getQuat[3];
  // Adding to the vector of pose
  generatedPath.push_back(p2);

  // Next point
  p3.position.x = 0.0;
  p3.position.y = _breadth;
  p3.position.z = _height;
  getQuat.setRPY(0.0, 0.0, 0.0);
  getQuat.normalize();
  p3.orientation.x = getQuat[0];
  p3.orientation.y = getQuat[1];
  p3.orientation.z = getQuat[2];
  p3.orientation.w = getQuat[3];
  // Adding to the vector of pose
  generatedPath.push_back(p3);

  // Next point
  p4.position.x = 0.0;
  p4.position.y = 0.0;
  p4.position.z = _height;
  getQuat.setRPY(0.0, 0.0, -PI / 2.0);
  getQuat.normalize();
  p4.orientation.x = getQuat[0];
  p4.orientation.y = getQuat[1];
  p4.orientation.z = getQuat[2];
  p4.orientation.w = getQuat[3];
  // Adding to the vector of pose
  generatedPath.push_back(p4);
}

/**
 * @brief routine to set the desired
 *        rectangular coverage area of the drone
 * @param length - length of rectangular coverage area
 *        breadth - breadth of rectangular coverage area
 * @return none
 */
void PathPlanning::setCovArea(double &length, double &breadth) {
  _length = length;
  _breadth = breadth;
}

/**
 * @brief retrieves the vector of path
 *         generated by the algorithm
 * @param none
 * @return generatedPath - path vector generated
 *         by algorithm
 */
std::vector<geometry_msgs::Pose> PathPlanning::getPath() {
  return (generatedPath);
}
